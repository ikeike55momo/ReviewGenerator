# .github/workflows/issue-to-claude-dev.yml
name: Issue → Claude Code Auto Development

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

jobs:
  parse-issue-and-develop:
    if: contains(github.event.issue.labels.*.name, 'claude-dev') || contains(github.event.comment.body, '/claude-dev')
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
        
    - name: 📋 Parse Issue Content
      id: parse-issue
      run: |
        echo "📋 Parsing issue content..."
        
        # Issue content from GitHub event
        ISSUE_TITLE="${{ github.event.issue.title }}"
        ISSUE_BODY="${{ github.event.issue.body }}"
        ISSUE_NUMBER="${{ github.event.issue.number }}"
        
        echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
        echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        
        # Extract development phase
        PHASE=$(echo "$ISSUE_BODY" | grep -o "Phase [0-9]" | head -1 | grep -o "[0-9]" || echo "2")
        echo "phase=$PHASE" >> $GITHUB_OUTPUT
        
        # Extract priority
        if echo "$ISSUE_BODY" | grep -q "🔥 緊急"; then
          echo "priority=urgent" >> $GITHUB_OUTPUT
        elif echo "$ISSUE_BODY" | grep -q "⚡ 高"; then
          echo "priority=high" >> $GITHUB_OUTPUT
        else
          echo "priority=normal" >> $GITHUB_OUTPUT
        fi
        
        # Create development prompt from issue
        cat > claude-issue-prompt.txt << EOF
        Issue #$ISSUE_NUMBER: $ISSUE_TITLE
        
        $ISSUE_BODY
        
        上記のIssueに基づいて実装を行ってください。
        要件を分析し、適切なコードを生成してください。
        EOF
        
    - name: 🤖 Run Claude Code Builder with Issue Context
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        ISSUE_CONTEXT: ${{ steps.parse-issue.outputs.issue_title }}
        ISSUE_NUMBER: ${{ steps.parse-issue.outputs.issue_number }}
      run: |
        echo "🤖 Running Claude Code Builder for Issue #${{ steps.parse-issue.outputs.issue_number }}..."
        
        # Create custom claude-builder for this issue
        cat > claude-issue-builder.js << 'EOF'
        const { Anthropic } = require('@anthropic-ai/sdk');
        const fs = require('fs').promises;
        require('dotenv').config();
        
        class IssueClaudeBuilder {
          constructor() {
            this.client = new Anthropic({
              apiKey: process.env.ANTHROPIC_API_KEY,
            });
          }
          
          async buildFromIssue() {
            const issuePrompt = await fs.readFile('claude-issue-prompt.txt', 'utf8');
            const requirements = await this.loadRequirements();
            
            const prompt = `
        あなたは優秀なフルスタック開発者です。
        
        【現在のプロジェクト】CSV駆動口コミ生成エージェント
        
        【GitHub Issue からの開発依頼】
        ${issuePrompt}
        
        【既存の要件定義】
        ${requirements}
        
        【技術スタック】
        - Mastra Framework
        - Claude Sonnet 4 API  
        - Next.js + TypeScript
        - Supabase
        
        上記のIssueの内容を分析し、必要な実装を行ってください。
        実際に動作するコードを生成し、ファイル構造も明確に示してください。
            `;
            
            const response = await this.client.messages.create({
              model: 'claude-3-5-sonnet-20241022',
              max_tokens: 4000,
              messages: [{ role: 'user', content: prompt }]
            });
            
            console.log('\n🤖 Claude からの回答:\n');
            console.log(response.content[0].text);
            return response.content[0].text;
          }
          
          async loadRequirements() {
            let allRequirements = '';
            try {
              const files = await fs.readdir('./requirements');
              for (const file of files) {
                if (file.endsWith('.md')) {
                  const content = await fs.readFile(`./requirements/${file}`, 'utf8');
                  allRequirements += `\n\n### ${file}\n${content}`;
                }
              }
            } catch (error) {
              console.log('Requirements folder not found, continuing...');
            }
            return allRequirements;
          }
        }
        
        new IssueClaudeBuilder().buildFromIssue().catch(console.error);
        EOF
        
        node claude-issue-builder.js | tee claude-issue-output.txt
        
    - name: 🔍 Process Claude Output and Create Files
      run: |
        echo "📝 Processing Claude output for Issue #${{ steps.parse-issue.outputs.issue_number }}..."
        
        # Same file creation logic as main workflow
        node -e "
          const fs = require('fs');
          const output = fs.readFileSync('claude-issue-output.txt', 'utf8');
          const codeBlocks = output.match(/\`\`\`[\s\S]*?\`\`\`/g) || [];
          
          let filesCreated = 0;
          codeBlocks.forEach((block) => {
            const lines = block.split('\n');
            const firstLine = lines[0].replace('```', '').trim();
            const code = lines.slice(1, -1).join('\n');
            
            if (firstLine === 'typescript' || firstLine === 'ts') {
              const classMatch = code.match(/(?:export\s+)?class\s+(\w+)/);
              if (classMatch && classMatch[1].includes('Agent')) {
                const filename = \`src/agents/\${classMatch[1]}.ts\`;
                fs.writeFileSync(filename, code);
                console.log('✅ Created:', filename);
                filesCreated++;
              }
            }
          });
          
          console.log('🎉 Files created for issue:', filesCreated);
        "
        
    - name: 📝 Create Pull Request
      if: steps.parse-issue.outputs.priority == 'urgent' || steps.parse-issue.outputs.priority == 'high'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Claude Code Bot"
        
        BRANCH_NAME="claude-dev/issue-${{ steps.parse-issue.outputs.issue_number }}"
        git checkout -b "$BRANCH_NAME"
        
        git add .
        git commit -m "🤖 Implement Issue #${{ steps.parse-issue.outputs.issue_number }}
        
        ${{ steps.parse-issue.outputs.issue_title }}
        
        Auto-generated by Claude Code API
        Closes #${{ steps.parse-issue.outputs.issue_number }}"
        
        git push origin "$BRANCH_NAME"
        
        # Create PR using GitHub CLI
        gh pr create \
          --title "🤖 Auto-fix: ${{ steps.parse-issue.outputs.issue_title }}" \
          --body "Automatically generated solution for Issue #${{ steps.parse-issue.outputs.issue_number }}
        
        ## 🤖 Claude Code Auto Implementation
        
        This PR was automatically generated by Claude Code API based on the requirements in Issue #${{ steps.parse-issue.outputs.issue_number }}.
        
        ## 📋 Changes
        - Auto-generated code implementation
        - Addresses the requirements specified in the issue
        
        ## 🔍 Review Required
        Please review the generated code before merging.
        
        Closes #${{ steps.parse-issue.outputs.issue_number }}" \
          --assignee "${{ github.event.issue.user.login }}"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 💬 Comment on Issue
      run: |
        gh issue comment ${{ steps.parse-issue.outputs.issue_number }} --body "🤖 **Claude Code Auto Development Started**
        
        **Status:** Implementation in progress
        **Phase:** ${{ steps.parse-issue.outputs.phase }}
        **Priority:** ${{ steps.parse-issue.outputs.priority }}
        
        The Claude Code API is analyzing your requirements and generating the implementation.
        
        $(if [ '${{ steps.parse-issue.outputs.priority }}' = 'urgent' ] || [ '${{ steps.parse-issue.outputs.priority }}' = 'high' ]; then
          echo '🔄 A Pull Request will be created automatically for review.'
        else
          echo '📝 Changes will be committed directly to the main branch.'
        fi)
        
        View progress: [Actions Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}