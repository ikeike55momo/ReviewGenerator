# .github/workflows/claude-official.yml
name: ü§ñ Claude Code Official Action

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

jobs:
  claude-response:
    runs-on: ubuntu-latest
    # ÂÖ¨ÂºèÊé®Â•®Ôºöclaude-dev „É©„Éô„É´„Åæ„Åü„ÅØ @claude „É°„É≥„Ç∑„Éß„É≥
    if: |
      contains(github.event.issue.labels.*.name, 'claude-dev') ||
      contains(github.event.issue.labels.*.name, 'claude-fix') ||
      contains(github.event.comment.body, '@claude') ||
      contains(github.event.issue.body, '@claude')
    
    steps:
      - name: ü§ñ Claude Code Action
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Ëá™Âãï„ÅßIssue/PR„ÅÆÂÜÖÂÆπ„ÇíË™≠„ÅøÂèñ„Çä„ÄÅÈÅ©Âàá„Å™ÂØæÂøú„ÇíÂÆüË°å

---
# .github/workflows/claude-custom-dev.yml  
# „Ç´„Çπ„Çø„É†ÈñãÁô∫„ÉØ„Éº„ÇØ„Éï„É≠„ÉºÔºàÊó¢Â≠ò„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÊîπËâØÔºâ
name: üõ†Ô∏è Claude Custom Development

on:
  issues:
    types: [opened, edited]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number

jobs:
  claude-custom-development:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'claude-dev')
    
    steps:
      - name: üöÄ Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: üîß Install dependencies
        run: npm ci
        
      - name: üìã Parse Issue and Generate Prompt
        id: parse-issue
        run: |
          echo "üìã Parsing issue #${{ github.event.issue.number }}..."
          
          # Issue content
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_BODY="${{ github.event.issue.body }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          
          # Extract phase and priority
          PHASE=$(echo "$ISSUE_BODY" | grep -o "Phase [0-9]" | head -1 | grep -o "[0-9]" || echo "2")
          
          if echo "$ISSUE_BODY" | grep -q "üî• Á∑äÊÄ•"; then
            PRIORITY="urgent"
          elif echo "$ISSUE_BODY" | grep -q "‚ö° È´ò"; then
            PRIORITY="high"  
          else
            PRIORITY="normal"
          fi
          
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          echo "phase=$PHASE" >> $GITHUB_OUTPUT
          echo "priority=$PRIORITY" >> $GITHUB_OUTPUT
          
          # Create development prompt
          cat > claude-development-prompt.txt << EOF
          ## GitHub Issue Analysis & Implementation Request
          
          **Issue:** #${ISSUE_NUMBER} - ${ISSUE_TITLE}
          **Phase:** ${PHASE}
          **Priority:** ${PRIORITY}
          
          ### Issue Content:
          ${ISSUE_BODY}
          
          ### System Context:
          - Project: CSVÈßÜÂãïÂè£„Ç≥„ÉüÁîüÊàêAI„Ç®„Éº„Ç∏„Çß„É≥„Éà
          - Tech Stack: Mastra Framework, Claude Sonnet 4, Next.js, TypeScript
          - Current Phase: ${PHASE}
          
          ### Implementation Request:
          ‰∏äË®ò„ÅÆIssue„ÇíÂàÜÊûê„Åó„ÄÅÈÅ©Âàá„Å™ÂÆüË£Ö„ÇíË°å„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          Ë¶Å‰ª∂„Å´Âü∫„Å•„ÅÑ„Å¶ÂÆüÈöõ„Å´Âãï‰Ωú„Åô„Çã„Ç≥„Éº„Éâ„ÇíÁîüÊàê„Åó„ÄÅ
          „Éï„Ç°„Ç§„É´ÊßãÈÄ†„Å®ÂÆüË£ÖÊâãÈ†Ü„ÇíÊòéÁ¢∫„Å´Á§∫„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          EOF
          
      - name: ü§ñ Call Claude API for Development
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "ü§ñ Calling Claude API for Issue #${{ steps.parse-issue.outputs.issue_number }}..."
          
          # Create Node.js script for Claude API call
          cat > claude-api-call.js << 'EOF'
          const { Anthropic } = require('@anthropic-ai/sdk');
          const fs = require('fs');
          
          async function callClaudeForDevelopment() {
            const client = new Anthropic({
              apiKey: process.env.ANTHROPIC_API_KEY,
            });
            
            const prompt = fs.readFileSync('claude-development-prompt.txt', 'utf8');
            
            try {
              const response = await client.messages.create({
                model: 'claude-3-5-sonnet-20241022',
                max_tokens: 4000,
                temperature: 0.3,
                messages: [{
                  role: 'user', 
                  content: `„ÅÇ„Å™„Åü„ÅØÂÑ™ÁßÄ„Å™„Éï„É´„Çπ„Çø„ÉÉ„ÇØÈñãÁô∫ËÄÖ„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆË¶ÅÊ±Ç„Å´Âü∫„Å•„ÅÑ„Å¶ÂÆüË£Ö„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

          ${prompt}

          ÂÆüË£ÖÊôÇ„ÅÆÊ≥®ÊÑèÁÇπÔºö
          - TypeScript„ÅßË®òËø∞
          - Mastra„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„Çí‰ΩøÁî®
          - ÂÆüÈöõ„Å´Âãï‰Ωú„Åô„Çã„Ç≥„Éº„Éâ„ÇíÁîüÊàê
          - „Éï„Ç°„Ç§„É´Âêç„Å®„Éá„Ç£„É¨„ÇØ„Éà„É™ÊßãÈÄ†„ÇíÊòéÁ¢∫„Å´ÊåáÂÆö
          - „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÇíÂê´„ÇÅ„Çã

          „Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØ„Å´„ÅØÂøÖ„Åö„Éï„Ç°„Ç§„É´Âêç„Çí„Ç≥„É°„É≥„Éà„ÅßË®òËºâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          ‰æãÔºö
          \`\`\`typescript
          // src/agents/NewAgent.ts
          export class NewAgent extends Agent {
            // ÂÆüË£Ö
          }
          \`\`\``
                }]
              });
              
              console.log('\nü§ñ Claude Response:\n');
              console.log(response.content[0].text);
              
              // Save response for file extraction
              fs.writeFileSync('claude-response.txt', response.content[0].text);
              
            } catch (error) {
              console.error('‚ùå Claude API Error:', error);
              process.exit(1);
            }
          }
          
          callClaudeForDevelopment();
          EOF
          
          # Install required package
          npm install @anthropic-ai/sdk
          
          # Call Claude API
          node claude-api-call.js
          
      - name: üîç Extract and Create Files from Claude Response
        run: |
          echo "üîç Extracting files from Claude response..."
          
          # File extraction script
          cat > extract-files.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          function extractAndCreateFiles() {
            const response = fs.readFileSync('claude-response.txt', 'utf8');
            
            // Extract code blocks with file paths
            const codeBlockPattern = /```(\w+)?\n(?:\/\/ (.+\.ts)\n)?([\s\S]*?)```/g;
            let match;
            let filesCreated = 0;
            
            while ((match = codeBlockPattern.exec(response)) !== null) {
              const language = match[1];
              const filePath = match[2];
              const code = match[3].trim();
              
              if (filePath && (language === 'typescript' || language === 'ts')) {
                // Ensure directory exists
                const dir = path.dirname(filePath);
                if (!fs.existsSync(dir)) {
                  fs.mkdirSync(dir, { recursive: true });
                }
                
                // Write file
                fs.writeFileSync(filePath, code);
                console.log(`‚úÖ Created: ${filePath}`);
                filesCreated++;
              }
            }
            
            // Also look for explicit file mentions
            const filePattern = /(?:Create|Update|File:)\s*([^\s]+\.ts)/gi;
            const codeBlocks = response.match(/```[\s\S]*?```/g) || [];
            
            codeBlocks.forEach((block, index) => {
              const lines = block.split('\n');
              const language = lines[0].replace('```', '').trim();
              
              if (language === 'typescript' || language === 'ts') {
                const code = lines.slice(1, -1).join('\n');
                
                // Try to extract class name for file name
                const classMatch = code.match(/export class (\w+)/);
                if (classMatch) {
                  const className = classMatch[1];
                  let filePath = '';
                  
                  if (className.includes('Agent')) {
                    filePath = `src/agents/${className}.ts`;
                  } else if (className.includes('Component')) {
                    filePath = `src/components/${className}.tsx`;
                  } else {
                    filePath = `src/types/${className}.ts`;
                  }
                  
                  const dir = path.dirname(filePath);
                  if (!fs.existsSync(dir)) {
                    fs.mkdirSync(dir, { recursive: true });
                  }
                  
                  if (!fs.existsSync(filePath)) {
                    fs.writeFileSync(filePath, code);
                    console.log(`‚úÖ Auto-created: ${filePath}`);
                    filesCreated++;
                  }
                }
              }
            });
            
            console.log(`üéâ Total files created: ${filesCreated}`);
            
            // Create summary
            fs.writeFileSync('files-created.txt', `${filesCreated}`);
          }
          
          extractAndCreateFiles();
          EOF
          
          node extract-files.js
          
      - name: üîß Validate and Fix Code
        run: |
          echo "üîß Validating generated code..."
          
          # Type check if tsconfig exists
          if [ -f "tsconfig.json" ]; then
            npx tsc --noEmit --skipLibCheck || echo "‚ö†Ô∏è Type check completed with warnings"
          fi
          
          # Install any missing dependencies
          npm install
          
      - name: üìù Create Pull Request or Commit
        run: |
          FILES_CREATED=$(cat files-created.txt)
          
          git config --local user.email "claude-bot@github-actions.com"
          git config --local user.name "Claude Development Bot"
          
          git add .
          
          if git diff --staged --quiet; then
            echo "üì≠ No changes to commit"
            exit 0
          fi
          
          if [ "${{ steps.parse-issue.outputs.priority }}" = "urgent" ] || [ "${{ steps.parse-issue.outputs.priority }}" = "high" ]; then
            # Create PR for high priority
            BRANCH_NAME="claude-dev/issue-${{ steps.parse-issue.outputs.issue_number }}"
            git checkout -b "$BRANCH_NAME"
            
            git commit -m "ü§ñ Implement Issue #${{ steps.parse-issue.outputs.issue_number }}

            ${{ github.event.issue.title }}
            
            - Generated ${FILES_CREATED} files
            - Auto-implementation by Claude Code API
            - Phase ${{ steps.parse-issue.outputs.phase }} development
            
            Closes #${{ steps.parse-issue.outputs.issue_number }}"
            
            git push origin "$BRANCH_NAME"
            
            # Create PR
            gh pr create \
              --title "ü§ñ Auto-implement: ${{ github.event.issue.title }}" \
              --body "Automatically generated implementation for Issue #${{ steps.parse-issue.outputs.issue_number }}

            ## ü§ñ Claude Code Implementation
            
            **Files Created:** ${FILES_CREATED}
            **Phase:** ${{ steps.parse-issue.outputs.phase }}
            **Priority:** ${{ steps.parse-issue.outputs.priority }}
            
            This PR was automatically generated by Claude Code API based on the requirements in the issue.
            
            ## üìã What's Implemented
            - Code analysis and implementation based on issue requirements
            - TypeScript implementation with Mastra framework
            - Proper error handling and file structure
            
            ## üîç Review Checklist
            - [ ] Code follows project conventions
            - [ ] All files are properly structured
            - [ ] Implementation matches requirements
            - [ ] Tests pass (if applicable)
            
            Closes #${{ steps.parse-issue.outputs.issue_number }}" \
              --assignee "${{ github.event.issue.user.login }}"
              
          else
            # Direct commit for low priority
            git commit -m "ü§ñ Auto-fix Issue #${{ steps.parse-issue.outputs.issue_number }}

            ${{ github.event.issue.title }}
            
            Auto-generated implementation (${FILES_CREATED} files)
            [skip ci]"
            
            git push
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: üí¨ Update Issue with Results
        run: |
          FILES_CREATED=$(cat files-created.txt)
          
          gh issue comment ${{ steps.parse-issue.outputs.issue_number }} --body "ü§ñ **Claude Code Implementation Complete**
          
          **Status:** ‚úÖ Implementation completed
          **Files Created:** ${FILES_CREATED}
          **Phase:** ${{ steps.parse-issue.outputs.phase }}
          **Priority:** ${{ steps.parse-issue.outputs.priority }}
          
          $(if [ '${{ steps.parse-issue.outputs.priority }}' = 'urgent' ] || [ '${{ steps.parse-issue.outputs.priority }}' = 'high' ]; then
            echo 'üîÑ **Pull Request created for review**'
            echo 'A Pull Request has been automatically created with the implementation.'
          else
            echo '‚úÖ **Changes committed directly**'  
            echo 'The implementation has been committed directly to the main branch.'
          fi)
          
          **Next Steps:**
          - Review the generated code
          - Test the implementation locally
          - Provide feedback if adjustments needed
          
          **Generated by:** Claude Code API
          **Workflow Run:** [View Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}